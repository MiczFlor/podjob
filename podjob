#!/usr/bin/php
<?php

error_reporting(E_ERROR | E_WARNING | E_PARSE); // suppress notices until I figured out how to check if var exists in xpath

# GLOBAL SETTINGS
// READ CONFIG INI FILE - add the absolute link here, because the script will be called by cron
$VAR = parse_ini_file("/home/micz/podjob/config.ini",1);

######### DON'T CHANGE ANYTHING BENEATH THIS LINE UNLESS YOU KNOW WHY AND LET ME KNOW TO IMPROVE THE CODE #

# VARIABLES NEEDED LATER
$PODCASTS = array(); // all podcasts read from ini file
$PROGRESS = array(); // tracking progress, success and failure
$OPT = array(); // the array with all behaviour information for podcasts and files

// create folders that don't exist
$foldercreate = foldercreate($VAR['wwwbaseloc']);
$foldercreate = foldercreate($VAR['nonwwwbaseloc']);
$foldercreate = foldercreate($VAR['tempfolder']);

# READ LIST OF PODCASTS FROM INI FILE
$PODCASTS = parse_ini_file($VAR['serverlist'],1);

# READ GLOBAL BEHAVIOUR FOR PODCASTS AND FILES FROM INI FILE
$OPT = parse_ini_file($VAR['options'],1);

# GUESS MISSING CONFIG VARIABLES
foreach($PODCASTS as $podcast => $values) {
  // in serverlist.ini the URL is given, but no name for the folder
  if(!isset($PODCASTS[$podcast]['folder'])) {
    $PODCASTS[$podcast]['folder'] = machinename($podcast); // guess name from podcast name
  } 
  // now replace white spaces with _ for all folder names
  $PODCASTS[$podcast]['folder'] = str_replace(" ", "_", $PODCASTS[$podcast]['folder']);
}

# LOOP THROUGH PODCASTS
foreach($PODCASTS as $podcast => $v) {
  $logwrite = logwrite("#########################################################", 5);
  $logwrite = logwrite("### START PODCAST '".$podcast."'", 1);
  
  ## CHECK PODCAST
  $PROGRESS['downloadpodcast'] = "true"; // start assuming we will get what we want
  
  // attempt to download podcast XML 
  $localpodxml = $VAR['tempfolder']."/".$v['folder'].".xml"; // filepath and name for local copy
  exec("wget -O ".$localpodxml." ".$v['podcasturl']."  >> /dev/null 2>&1");
  // check if XML was retrieved by checking if filesize == 0?
  if (filesize($localpodxml) == 0) {
    $logwrite = logwrite("ERROR downloading XML (filesize == 0) : ".$v['podcasturl'], 1);
    unlink($localpodxml);
    $PROGRESS['downloadpodcast'] = "false"; // keep abort in mind for later
  } else {
    $logwrite = logwrite("INFO: successfully downloadeded XML : ".$v['podcasturl'], 4);
  }

  ## READ FROM PODCAST
  // if podcast download is still desired
  if($PROGRESS['downloadpodcast'] == "true") {
  
    ### CREATE PODCAST FOLDERS
    // create podcast folder - if non existent
    $foldercreate = foldercreate($VAR['wwwbaseloc']."/".$v['folder']);
    $foldercreate = foldercreate($VAR['nonwwwbaseloc']."/".$v['folder']); // this is hidden from www - for options and tracking files
    $foldercreate = foldercreate($VAR['nonwwwbaseloc']."/".$v['folder']."/rss"); // this is hidden from www - for options and tracking files
    // write podcast specific options if non existent
    if(!file_exists($VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini")) {
      if (!copy($VAR['options'], $VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini")) {
        $logwrite = logwrite("ERROR creating options file for '".$podcast."'", 1);
      } else {
        $logwrite = logwrite("INFO: successfully created options file for '".$podcast."'", 4);
      }
    } else {
      $logwrite = logwrite("INFO: Options file exists, none created for '".$podcast."'", 4);
    }

    ### CHECK FOR PODCAST SPECIFIC SETTINGS AND OVERWRITE GLOBAL IF FOUND
    // first, set local version of OPT for this podcast
    $OPTPOD = $OPT;
    if(file_exists($VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini") && $PROGRESS['downloadpodcast'] == "true" ) {
      $logwrite = logwrite("INFO: reading specific options for '".$podcast."'", 4);
      $OPTTEMP = parse_ini_file($VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini",1);
      // overwrite global options (one by one, so we don't lose any global options if not specified locally)
      foreach($OPTTEMP as $key => $value) {
        $OPTPOD[$key] = $value;
      }
    }
    print_r($OPTPOD); //???
    
    ### GET LIST OF ALL ITEMS IN PODCAST
    // extract the items from the original XML podcast
    $pod = getitemsfromxml($localpodxml);
    // chop the rss XML into chunks and return an array with the keys header, channel and items (which in return is an array, newest on top)
    $rssxmlarray = rssxml2array($localpodxml);

    // set counter, in case OPTIONS tells us only to download a limited number of items from the list
    $counter = 0;
    
    ## LOOP THROUGH ALL FILES IN PODCAST
    foreach($pod['items'] as $rssinfo) {
      $PROGRESS['downloadfile'] = "true"; // start assuming we will get what we want
      // increase counter of downloaded files by one
      $counter++;
      
      ### CHECK WITH OPTIONS TO DOWNLOAD ONLY MAX NUMBER SPECIFIED OR ALL
      if($OPTPOD['filesdownload'] != "all") { // ignore this check if we are supposed to download all files
        if($counter > $OPTPOD['filesdownload']) {
          $PROGRESS['downloadfile'] = "false"; // downloaded all I am supposed to download
          $logwrite = logwrite("Skipping Download. Reached maximum number of items to download for '".$podcast."'", 4);
        }
      }
      
      ### CHECK IF ENCLOSURE IS SET WITH URL
      if(!isset($rssinfo['enclosure_url'])) {
        // there is no URL linked in the item. Can't do anything.
        $logwrite = logwrite("ERROR. No enclosure URL found in item '".$rssinfo['title']."'", 1);
      } else { // URL for audio file found, Off we go.
        #### VARIABLES FOR THE PODCAST ITEM
        // create some variables in the beginning to make code more legible
        $itemlocal['file'] = $VAR['wwwbaseloc']."/".$v['folder']."/".$rssinfo['enclosure_filename']; // the audio file will be saved here
        $itemlocal['fileini'] = $VAR['nonwwwbaseloc']."/".$v['folder']."/".$rssinfo['enclosure_filename'].".ini"; // the options ini file will be saved here
        $itemlocal['filexmldir'] = $VAR['nonwwwbaseloc']."/".$v['folder']."/rss"; // the xml snippets will be saved here
        $podcastlocallogdownload = $VAR['nonwwwbaseloc']."/".$v['folder']."/download.log"; // the download log for downloaded and renamed files
        
        ### CHECK FOR RENAMING AND GET NEW FILE NAME NOW
        if(isset($OPTPOD['rename'])) {
          $rssinfo['rename'] = filerename($rssinfo['enclosure_filename']);
          //print $rssinfo['enclosure_filename'] . " - " . $rssinfo['rename']."\n";//???
          $itemlocal['file'] = $VAR['wwwbaseloc']."/".$v['folder']."/".$rssinfo['rename']; // the audio file will be saved here
          $itemlocal['fileini'] = $VAR['nonwwwbaseloc']."/".$v['folder']."/".$rssinfo['rename'].".ini"; // the options ini file will be saved here
        }
        
        #### CHECK IF FILE DOWNLOAD IS IN PROGRESS
        // read ini for enclosure file
        if(!file_exists($itemlocal['fileini'])) {
          $logwrite = logwrite("No status found for file '".$rssinfo['enclosure_filename']."'", 5);
        } else {
          $filestatus = parse_ini_file($itemlocal['fileini'],1);
          if($filestatus['status'] == "downloading") { // => download in progress
            $PROGRESS['downloadfile'] = "false"; // currently downloading, so don't download
            $logwrite = logwrite("Skipping Download. Progress status set to 'downloading' for file '".$rssinfo['enclosure_filename']."'", 4);
            // TODO: check if date is soooo old that we should assume the process failed
          }
        }
        
        #### CHECK IF FILE EXISTS AND IF SO IF WE SHOULD OVERWRITE   
        if($PROGRESS['downloadfile'] == "true") { // yes, we are still ready for downloading the item, so check some more
          if($OPTPOD['filesoverwrite'] != "true") { // we should NOT overwrite existing files
            // check if file exists
            // a. best way: check in download log
            // this checks the original enclosure URL and is safer in case of renaming files after downloading
            if(file_exists($podcastlocallogdownload)) { // download log exists
              if( exec('grep '.escapeshellarg($rssinfo['enclosure_url']."||").' '.$podcastlocallogdownload)) {
                $logwrite = logwrite("NOTE: Skipping Download. File found in download log '".$rssinfo['enclosure_url']."'", 3);
                $PROGRESS['downloadfile'] = "false"; // not allowed to overwrite
              } 
            } else { 
              // b. check if file exists, if download log does not exist 
              if(file_exists($itemlocal['file'])) {
                $logwrite = logwrite("NOTE: Skipping Download. File exists '".$itemlocal['file']."'", 3);
                $PROGRESS['downloadfile'] = "false"; // not allowed to overwrite
              }
            }
            $logwrite = logwrite("INFO: Options set to overwrite existing target file '".$itemlocal['file']."'", 4);
          } 
        }
        
        #### CHECK NOW IF WE ARE STILL MEANT TO DOWNLOAD THE FILE
        if($PROGRESS['downloadfile'] == "false") {
          $logwrite = logwrite("WARNING: Download #".$counter." skipped for reasons found in options or the like. File: '".$itemlocal['file']."'", 2);
        } else {      
          ##### SET FILE STATUS TO 'DOWNLOADING'
          // we do this by creating an ini config file with the name of the audio file
          $filestatus = array(
            "date" => date("r"), // store when we start downloading. Allowing for deletion of status file if e.g. older than 24 hours
            "status" => "downloading",
            "enclosure_url" => $rssinfo['enclosure_url']
          );
          // write this array to ini file inside podcast folder
          $array2ini = array2ini($itemlocal['fileini'], $filestatus);
          
          #### START DOWNLOADING FILE      
          // we could make this a background process (and might do so at a later stage)
          // but for now this is all linear, one after the other. Get the file first, modify it, then on to the next.
          $logwrite = logwrite("Start download #".$counter." - file '".$rssinfo['enclosure_url']."'");
          exec("wget -O ".$itemlocal['file']." ".$rssinfo['enclosure_url']."  >> /dev/null 2>&1");
          
          #### WRITE HEADER, CHANNEL AND ITEM XML AFTER SUCCESSFUL DOWNLOAD
          file_put_contents($itemlocal['filexmldir']."/".$rssinfo['enclosure_filename'].".xml", $rssxmlarray['items'][($counter - 1)]);
          file_put_contents($itemlocal['filexmldir']."/_CHANNEL.xml", $rssxmlarray['channel']);
          file_put_contents($itemlocal['filexmldir']."/_HEADER.xml", $rssxmlarray['header']);
          $logwrite = logwrite("INFO: Wrote XML of podcast for #".$counter." - file '".$rssinfo['enclosure_url']."' to '".$itemlocal['filexmldir']."/".$rssinfo['enclosure_filename'].".xml'", 4);

          #### LOG DOWNLOADED FILE
          // check if log file exists
          $PROGRESS['logdownload'] = "true"; // assume we should log the download
          if(file_exists($podcastlocallogdownload)) { // download log exists
            // now see if file has already been logged
            if( exec('grep '.escapeshellarg($rssinfo['enclosure_url']."||").' '.$podcastlocallogdownload)) {
              // found match
              $PROGRESS['logdownload'] = "false"; // log file exists AND we found the enclosure URL: don't log
            } 
          } 
          if($PROGRESS['logdownload'] == "true") {
            // appending original enclosure URL to download log file in podcast folder
            $logmessage = $rssinfo['enclosure_url']."||".date("r")."\n";
            // using the FILE_APPEND flag to append the content to the end of the file
            // and the LOCK_EX flag to prevent anyone else writing to the file at the same time
            file_put_contents($podcastlocallogdownload, $logmessage, FILE_APPEND | LOCK_EX);
            // add renaming of original file IF
            if(isset($rssinfo['rename'])) {
              $logmessage = $rssinfo['enclosure_url']."||RENAME||".$rssinfo['rename']."||".date("r")."\n";
              file_put_contents($podcastlocallogdownload, $logmessage, FILE_APPEND | LOCK_EX);
            }
          }
          
          ##### SET FILE TO 'IN PROGRESS - SET ID3V2'
          $filestatus = array(
            "date" => date("r"), // store when we start downloading. Allowing for deletion of status file if e.g. older than 24 hours
            "status" => "id3processing",
            "enclosure_url" => $rssinfo['enclosure_url']
          );
          // write this array to ini file inside podcast folder
          $array2ini = array2ini($itemlocal['fileini'], $filestatus);
          
          ##### CONVERT EXISTING FILE METADATA TO LATEST ID3V2 VERSION
          $exec = "id3v2 -C ".$itemlocal['file']; // convert all tags to ID3V2
          exec($exec);
          // delete all ID3 v1 tags
          $exec = "id3v2 -s ".$itemlocal['file']; 
          exec($exec);
          
          $id3tags = array(); // the values to assign to the existing mp3 file
          
          ##### READ EXISTING FILE METADATA
          $exec = "id3v2 -R ".$itemlocal['file'];
          // getting id3 tags in a string
          $lines = explode("\n",shell_exec($exec));
          foreach($lines as $line){
            if (preg_match('/(^[0-9a-zA-Z]{0,4}): (.*)/', $line, $matches)) {
              $value = trim($matches[2]);
              if($value != "") {
                $id3tags['file'][$matches[1]] = $matches[2];
             } else {
                // EMPTY MATCH ------------------------------
              } 
            } else {
              // NO MATCH -----------------------------
            }
          } 

          ##### COMBINE RSS ITEM INFO WITH FILE METADATA
          foreach($VAR['id3v2assign'] as $key => $values) {
            $xmlpairs = explode(";", trim($values)); // there can be more than one set in config.ini
            foreach($xmlpairs as $xmlpair) { // go through each one, the first found is the one to go with
              $xmlkeyvalue = explode("_-_", $xmlpair); // [0] = item or channel, [1] = key
              switch($xmlkeyvalue[0]) {
                case "file":
                  if(isset($id3tags[$xmlkeyvalue[0]][$xmlkeyvalue[1]])) {
                    $id3tags['new'][$key] = $id3tags[$xmlkeyvalue[0]][$xmlkeyvalue[1]];
                    // break out of foreach loop
                    break 2;
                  } else {
                  }
                break;
                case "channel":
                  if(isset($pod[$xmlkeyvalue[0]][$xmlkeyvalue[1]])) {
                    $id3tags['new'][$key] = $pod[$xmlkeyvalue[0]][$xmlkeyvalue[1]];
                    // break out of foreach loop
                    break 2;
                  } else {
                  }
                break;
                case "items":
                  if(isset($pod[$xmlkeyvalue[0]][($counter-1)][$xmlkeyvalue[1]])) {
                    $id3tags['new'][$key] = $pod[$xmlkeyvalue[0]][($counter-1)][$xmlkeyvalue[1]];
                    // break out of foreach loop
                    break 2;
                  } else {
                  }
                break;
              }
            }
          }
          
          ##### DELETE ALL ID3 TAGS THAT WE WANT TO OVERWRITE
          foreach($id3tags['new'] as $key => $value) {
            // removing has to be done in this loop, which is more CPU and time consuming, but that's how id3v2 works
            // to only remove what is really necessary, check with id3 frames found in file
            if(array_key_exists ( $key , $id3tags['file'] )) {
              $exec = "id3v2 -r \"".$key."\" ".$itemlocal['file'];
              exec($exec);
            }
          }
          
          ##### WRITE COMBINED ID3V2 TAGS TO FILE
          $exec = "id3v2 ";
          foreach($id3tags['new'] as $key => $value) {
            // clean multiple slashes from $value, if any
            // then escape double quotes with backslash
            $value = str_replace  ("\"", "\\\"", removeslashes($value));
            if($key == "COMM") { // wrap this string into CDATA
              $value = "<![CDATA[".$value."]]>";
            }
            $exec .= "--".$key." \"".$value."\" ";
          }
          $exec .= $itemlocal['file'];
          exec($exec);
          
          $logwrite = logwrite("INFO: successfully written ID3 tags to file '".$itemlocal['file']."'", 4); 
          $logwrite = logwrite("See ID3 tags with 'id3v2 -R ".$itemlocal['file'] ."'", 5); 
          
          #####  CHANGE FILE DATE TO 'PUBDATE'
          // reset file date for testing: uncomment next line. Will set file date to 1st Jan 1999 1am 01:01
          //$rssinfo['filedate_touch'] = "199901010101.01";
          $exec = "touch -t ".$rssinfo['filedate_touch']." ".$itemlocal['file'];
          exec($exec);
          $logwrite = logwrite("INFO: successfully changed date / touch for file #".$counter." - file '".$itemlocal['file']."'", 4);
          $logwrite = logwrite($exec, 5);
          
          ##### SET FILE STATUS TO 'SUCCESS'
          // this status is needed to show all 
          // we do this by creating an ini config file with the name of the audio file
          $filestatus = array(
            "date" => date("r"), // store when we start downloading. Allowing for deletion of status file if e.g. older than 24 hours
            "status" => "success",
            "enclosure_url" => $rssinfo['enclosure_url']
          );
          // write this array to ini file inside podcast folder
          $array2ini = array2ini($itemlocal['fileini'], $filestatus);                  
          
          ##### RENAME FILE IF REQUESTED
          // TODO later

        } // end "if" download file == true|false
      } // end "if" enclosure_url exists
    } // end foreach item
  } // end "if" podcast download == true|false
  
  ## DELETE TEMP COPY OF PODCAST
  unlink($localpodxml);
  $logwrite = logwrite("INFO: Deleted local temp copy of podcast '".$localpodxml."'", 4);

  $logwrite = logwrite("### FINISHED PODCAST '".$podcast."'", 5);
}

$logwrite = logwrite("DONE \n", 5);

#################################################################################
# FUNCTIONS

// create new filename for renaming
function filerename($basename) {
  global $OPTPOD;
  global $PODCASTS;
  global $podcast;
  global $rssinfo;
  // take file ending off the filename so we can append it at new name
  $file_parts = pathinfo($basename);
  $searchreplace = array(
    "%podyear%" => date('Y', strtotime($rssinfo['pubDate'])),
    "%podmonth%" => date('m', strtotime($rssinfo['pubDate'])),
    "%podday%" => date('d', strtotime($rssinfo['pubDate'])),
    "%podhour24%" => date('H', strtotime($rssinfo['pubDate'])),
    "%podmin%" => date('i', strtotime($rssinfo['pubDate'])),
    "%podsec%" => date('s', strtotime($rssinfo['pubDate'])),
    "%nowyear%" => date('Y'),
    "%nowmonth%" => date('m'),
    "%nowday%" => date('d'),
    "%nowhour24%" => date('H'),
    "%nowmin%" => date('i'),
    "%nowsec%" => date('s'),
    "%filename%" => $file_parts['filename'], // the filename is the basename without the extension
    "%podcastname%" => $podcast, // podcast name as set in the serverlist.ini file
    "%podcastfolder%" => $PODCASTS[$podcast]['folder'] // podcast folder name as set in the serverlist.ini file
  );
  // create the new name with a funky array flip flop
  $search = array_keys($searchreplace);
  $replace = array_values($searchreplace);
  $return = str_replace ( $search , $replace , $OPTPOD['rename'] );
  // set extension to default from options.ini - and overwrite in the following "if" if needed
  $ext = ".".$OPTPOD['extension'];
  if($file_parts['extension']) {
    // set file extension as found on file
    $ext = ".".$file_parts['extension'];
  }
  // add file extension
  $return .= $ext;
  return $return;
}
// write flat ini config file from array
function array2ini($file, $array) {
  $ini = "";
  foreach ($array as $key => $value) {
    $ini .= $key." = \"".$value."\"\n";
  }
  if(!file_put_contents($file, $ini)) {
    $logwrite = logwrite("ERROR: FUNCTION ".__FUNCTION__." : ERROR writing status to file '".$file."'", 1);
    return "false";
  } else {
    $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : SUCCESS writing status to file '".$file."'", 4);
    return "true";
  }
}

// reading all item information from podcast, returning array
function getitemsfromxml($localpodxml) {
  $return = array(); // this will return the array with items
  // TODO: what if there are no items in the xml? This is not an error, but an empty podcast.
  
  $xmlraw = file_get_contents($localpodxml);
  $xml = cleanxml($xmlraw);
  $doc = new DOMDocument();
  $doc->preserveWhiteSpace = false;
  $doc->loadXML($xml);
  // Initialize XPath    
  $xpath = new DOMXpath($doc);
  // Register namespaces
  $xpath->registerNamespace( 'dc', 'http://purl.org/dc/elements/1.1/');
  $xpath->registerNamespace( 'media', 'http://search.yahoo.com/mrss/');
  $xpath->registerNamespace( 'itunes', 'http://www.itunes.com/dtds/podcast-1.0.dtd');
  
  ### READ PODCAST INFORMATION TO ARRAY
  // channel
  $return['channel'] = xmlchannel2array($xpath->query( 'channel')->item(0), $xpath);
  // items
  $items = $doc->getElementsByTagName('item'); 
  foreach($items as $item) {
    ### READ PODCAST INFORMATION TO ARRAY
    $return['items'][] = xmlitem2array($item, $xpath);
  }
  return $return;
}

// extract channel information from podcast XML 
function xmlchannel2array($channel, $xpath) {
  $return = array(); // the information we want to know in an array
  $keys = array( // the keys we are looking for
    "title",
    "link",
    "description",
    "language",
    "copyright",
    "itunes:author",
    "itunes:subtitle",
    "itunes:owner",
    "itunes:category",
    "itunes:image",
    "lastBuildDate"
  );
  foreach($keys as $key) {
    if($return[$key] = $xpath->query( $key, $channel)->item(0)->nodeValue) {
    } else {
      $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : PHP Notice: Trying to get property '".$key."' of non-object", 4);
    }
    // and crop this of extra baggage
    $return[$key] = trim(strip_tags($return[$key]));
  }
  // check for image URL
  $return['image_url'] = "";
  // first check inside itunes tag
  $image = $xpath->query( 'itunes:image', $channel)->item(0);
  $return['image_url'] = trim(strip_tags($image->attributes->getNamedItem('href')->value));
  // check if we were successful
  if($return['image_url'] == "") {
    // no success, try image tag
    $image = $xpath->query( 'image', $channel)->item(0);
    $return['image_url'] = $xpath->query( 'url', $image)->item(0)->nodeValue;
  }
  // unset fields in the array, if the value is empty - so we can later check for missing values and improvise
  foreach($keys as $key) {
    if($return[$key] == "") {
      unset($return[$key]);
      $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : Item field '".$key."' is empty, non existent or can not be read", 4);
    }
  }
  return $return;
}
// extract item information from podcast XML and adds more information (e.g. filedate and mp3 basename)
function xmlitem2array($item, $xpath) {
  $return = array(); // the information we want to know in an array
  $keys = array( // the keys we are looking for
    "title",
    "guid",
    "pubDate",
    "link",
    "category",
    "copyright",
    "description",
    "generator",
    "itunes:author",
    "itunes:duration",
    "itunes:subtitle",
    "itunes:summary",
  );
  foreach($keys as $key) {
    if($return[$key] = $xpath->query( $key, $item)->item(0)->nodeValue) {
    } else {
      $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : PHP Notice: Trying to get property '".$key."' of non-object", 4);
    }
    // and crop this of extra baggage
    $return[$key] = trim(strip_tags($return[$key]));
  }
  // now let's look at the enclosure tag to get all relevant file information
  $enclosure = $xpath->query( 'enclosure', $item)->item(0);
  $return['enclosure_url'] = trim(strip_tags($enclosure->attributes->getNamedItem('url')->value));
  $return['enclosure_length'] = trim(strip_tags($enclosure->attributes->getNamedItem('length')->value));
  $return['enclosure_type'] = trim(strip_tags($enclosure->attributes->getNamedItem('type')->value));
  
  // little error checking and guessing for essential fields
  // check if the pubDate field exists. If not, we have to set the value to "now" - assuming the file is new since the last crontab check
  if(!isset($return['pubDate'])) {
    date('r');
  }  
  
  // done with the XML, now some additional stuff we need
  
  // audio file name is needed to see if we already have this file locally
  $return['enclosure_filename'] = cleanfilename($return['enclosure_url']);
  
  // changing the file date with exec(touch) we need a special date format: touch -t yyyyMMddHHmm.ss $filename
  $return['filedate_touch'] = date('YmdHi.s', strtotime($return['pubDate'])); 
  // special format used by id3v2
  $return['id3v2_timestamp'] = date('Y-m-d', strtotime($return['pubDate']))."T".date('H:i:s', strtotime($return['pubDate'])); //yyyy-MM-ddTHH:mm:ss
  
  // year of publication
  $return['dateY'] = date('Y', strtotime($return['pubDate'])); 
  
  // unset fields in the array, if the value is empty - so we can later check for missing values and improvise
  foreach($keys as $key) {
    if($return[$key] == "") {
      unset($return[$key]);
      $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : Item field '".$key."' is empty, non existent or can not be read", 4);
    }
  }
  return $return;
}

// chop up the original XML file and return the XML as an array for channel, items and header
function rssxml2array($localpodxml) {
  $return = array(); // this will return the array with items
  $xmlraw = file_get_contents($localpodxml);
  // change item and channel tags to lowercase
  $match = array("/<item/i", "/<\/item/i", "/<channel/i", "/<\/channel/i");
  $replace = array("<item", "</item", "<channel", "</channel");
  $xmlraw = preg_replace($match, $replace, $xmlraw);
  // apologies for the rough chopping with "explode". It works. I am open for more elegant solutions.
  // I tried DOMXpath with Namespaces, but the rough'n'ready solution below worked better (for me).
  $tempitems = explode("<item>", $xmlraw); 
  $xmlstart = array_shift($tempitems); // first chunk will containt channel, the others are all items
  $xmlstart = explode("<channel>", $xmlstart); // now we have header and channel start in an array
  $return['header'] = $xmlstart[0];
  $return['header'] = trim($return['header']);
  $return['channel'] = trim($xmlstart[1]);
  foreach($tempitems as $itemraw) {
    $itemraw = explode("</item>", $itemraw); // chop off the end of the item
    $itemxml = "<item>".$itemraw[0]."\n</item>";
    $return['items'][] = trim($itemxml);
    $xmlend =  $itemraw[1]; // don't forget to take a look at the end of the item list, might contain channel xml
  }
  // take a look at the end of the xml file
  $xmlend = explode("</channel>", $xmlend); // now we have header and channel start in an array
  $return['channel'] .= $xmlend[0];
  $return['channel'] = trim($return['channel']);
  return $return;
}

// make machine readable name
function machinename($name) {
  $name = trim($name);
  $name = strtolower($name);
  $name = preg_replace('/\s+/', '_',$name);
  $name = preg_replace('/&/', '-',$name);
  $name = preg_replace('/:/', '-',$name);
  $name = preg_replace('/\./', '-',$name);
  $name = preg_replace('/\,/', '',$name);
  //$name = urlencode($name); 
  return $name;
}

// returns the filename only, no prefix folders or suffix url parameters ?key=value&andsoforth
function cleanfilename($name) {
  $temp = parse_url($name);
  $temp = pathinfo($temp['path']);
  $name = $temp['basename'];
  return $name;
}

// this might need some extra work, helps to bypass namespace problems
function cleanxml($xml) {
  $xml = preg_replace('/\&amp\;/', '+',$xml);
  return $xml;
}

// write log file
function logwrite($message, $loglevel = 5) {
  global $VAR;
  if($VAR['loglevel'] > 0) { // check if we should log anything
    if($loglevel <= $VAR['loglevel']) { // check if we should log this message
      $message = date('Y-m-dTH:i:s', time())." : ".trim($message);
      if($VAR['logscreen'] == "true") { // check if we should also display on screen (running from the command line)
        echo $message."\n";
      }
      // todo: writing log file
    }
  } 
  return "true";
}

// create a folder if non existent
function foldercreate($folder) {
  $return = "false"; // the return value of this function
  if (!file_exists($folder)) {
    if(!mkdir($folder, 0777, true)) {
      $logwrite = logwrite("ERROR in FUNCTION ".__FUNCTION__." : ERROR creating folder : ".$folder, 1);
    } else {
      $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : SUCCESS creating folder : ".$folder, 4);
      $return = "true";
    }
  } else {
    $logwrite = logwrite("INFO: FUNCTION ".__FUNCTION__." : folder already exists : ".$folder, 4);
    $return = "true";
  }
  return $return;
}

// get rid off multiple backslashes like: This isn\\\\\'t working
function removeslashes($string) {
  $string=implode("",explode("\\",$string));
  return stripslashes(trim($string));
}


?>
