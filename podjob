#!/usr/bin/php
<?php
# this script needs to be started with the absolute path to the config.ini file like this:
# ./podjob --config=/home/micz/Documnts/github/podjob/config.ini

# read config location
$val = getopt(null, ["config:"]);
#print $val['config'];

error_reporting(E_ERROR | E_WARNING | E_PARSE); // suppress notices until I figured out how to check if var exists in xpath

# GLOBAL SETTINGS
// READ CONFIG INI FILE - add the absolute link here, because the script will be called by cron
$VAR = parse_ini_file($val['config'],1);

######### DON'T CHANGE ANYTHING BENEATH THIS LINE UNLESS YOU KNOW WHY AND LET ME KNOW TO IMPROVE THE CODE #

# READ FUNCTIONS FROM SEPARATE FILE
include_once($VAR['baseloc']."/func.php");

# VARIABLES NEEDED LATER
$PODCASTS = array(); // all podcasts read from ini file
$PROGRESS = array(); // tracking progress, success and failure
$OPT = array(); // the array with all behaviour information for podcasts and files

// create folders that don't exist
$foldercreate = foldercreate($VAR['wwwbaseloc']);
$foldercreate = foldercreate($VAR['nonwwwbaseloc']);
$foldercreate = foldercreate($VAR['tempfolder']);

# READ LIST OF PODCASTS FROM INI FILE
$PODCASTS = parse_ini_file($VAR['baseloc']."/".$VAR['serverlist'],1);

# READ GLOBAL BEHAVIOUR FOR PODCASTS AND FILES FROM INI FILE
$OPT = parse_ini_file($VAR['options'],1);

# GUESS MISSING CONFIG VARIABLES
foreach($PODCASTS as $podcast => $values) {
  // in serverlist.ini the URL is given, but no name for the folder
  if(!isset($PODCASTS[$podcast]['folder'])) {
    $PODCASTS[$podcast]['folder'] = machinename($podcast); // guess name from podcast name
  } 
  // now replace white spaces with _ for all folder names
  $PODCASTS[$podcast]['folder'] = str_replace(" ", "_", $PODCASTS[$podcast]['folder']);
}

# LOOP THROUGH PODCASTS
foreach($PODCASTS as $podcast => $v) {
  $logwrite = logwrite("#########################################################", 5);
  $logwrite = logwrite("### START PODCAST '".$podcast."'", 1);
  
  ## CHECK PODCAST
  $PROGRESS['downloadpodcast'] = "true"; // start assuming we will get what we want
  
  // attempt to download podcast XML 
  $localpodxml = $VAR['tempfolder']."/".$v['folder'].".xml"; // filepath and name for local copy
  exec("wget -O ".$localpodxml." ".$v['podcasturl']."  >> /dev/null 2>&1");
  // check if XML was retrieved by checking if filesize == 0?
  if (filesize($localpodxml) == 0) {
    $logwrite = logwrite("ERROR downloading XML (filesize == 0) : ".$v['podcasturl'], 1);
    unlink($localpodxml);
    $PROGRESS['downloadpodcast'] = "false"; // keep abort in mind for later
  } else {
    $logwrite = logwrite("INFO: successfully downloadeded XML : ".$v['podcasturl'], 4);
  }

  ## READ FROM PODCAST
  // if podcast download is still desired
  if($PROGRESS['downloadpodcast'] == "true") {
  
    ### CREATE PODCAST FOLDERS
    // create podcast folder - if non existent
    $foldercreate = foldercreate($VAR['wwwbaseloc']."/".$v['folder']);
    $foldercreate = foldercreate($VAR['nonwwwbaseloc']."/".$v['folder']); // this is hidden from www - for options and tracking files
    $foldercreate = foldercreate($VAR['nonwwwbaseloc']."/".$v['folder']."/rss"); // this is hidden from www - for options and tracking files
    // write podcast specific options if non existent
    if(!file_exists($VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini")) {
      if (!copy($VAR['options'], $VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini")) {
        $logwrite = logwrite("ERROR creating options file for '".$podcast."'", 1);
      } else {
        $logwrite = logwrite("INFO: successfully created options file for '".$podcast."'", 4);
      }
    } else {
      $logwrite = logwrite("INFO: Options file exists, none created for '".$podcast."'", 4);
    }

    ### CHECK FOR PODCAST SPECIFIC SETTINGS AND OVERWRITE GLOBAL IF FOUND
    // first, set local version of OPT for this podcast
    $OPTPOD = $OPT;
    if(file_exists($VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini") && $PROGRESS['downloadpodcast'] == "true" ) {
      $logwrite = logwrite("INFO: reading specific options for '".$podcast."'", 4);
      $OPTTEMP = parse_ini_file($VAR['nonwwwbaseloc']."/".$v['folder']."/options.ini",1);
      // overwrite global options (one by one, so we don't lose any global options if not specified locally)
      foreach($OPTTEMP as $key => $value) {
        $OPTPOD[$key] = $value;
      }
    }
    //print_r($OPTPOD); //???
    
    ### GET LIST OF ALL ITEMS IN PODCAST
    // extract the items from the original XML podcast
    $pod = getitemsfromxml($localpodxml);
    // chop the rss XML into chunks and return an array with the keys header, channel and items (which in return is an array, newest on top)
    $rssxmlarray = rssxml2array($localpodxml);

    // set counter, in case OPTIONS tells us only to download a limited number of items from the list
    $counter = 0;
    
    ## LOOP THROUGH ALL FILES IN PODCAST
    foreach($pod['items'] as $rssinfo) {
      $PROGRESS['downloadfile'] = "true"; // start assuming we will get what we want
      // increase counter of downloaded files by one
      $counter++;
      
      ### CHECK WITH OPTIONS TO DOWNLOAD ONLY MAX NUMBER SPECIFIED OR ALL
      if($OPTPOD['filesdownload'] != "all") { // ignore this check if we are supposed to download all files
        if($counter > $OPTPOD['filesdownload']) {
          $PROGRESS['downloadfile'] = "false"; // downloaded all I am supposed to download
          $logwrite = logwrite("Skipping Download. Reached maximum number of items to download for '".$podcast."'", 4);
        }
      }
      
      ### CHECK IF ENCLOSURE IS SET WITH URL
      if(!isset($rssinfo['enclosure_url'])) {
        // there is no URL linked in the item. Can't do anything.
        $logwrite = logwrite("ERROR. No enclosure URL found in item '".$rssinfo['title']."'", 1);
      } else { // URL for audio file found, Off we go.
        #### VARIABLES FOR THE PODCAST ITEM
        // create some variables in the beginning to make code more legible
        $itemlocal['file'] = $VAR['wwwbaseloc']."/".$v['folder']."/".$rssinfo['enclosure_filename']; // the audio file will be saved here
        $itemlocal['fileini'] = $VAR['nonwwwbaseloc']."/".$v['folder']."/".$rssinfo['enclosure_filename'].".ini"; // the options ini file will be saved here
        $itemlocal['filexmldir'] = $VAR['nonwwwbaseloc']."/".$v['folder']."/rss"; // the xml snippets will be saved here
        $podcastlocallogdownload = $VAR['nonwwwbaseloc']."/".$v['folder']."/download.log"; // the download log for downloaded and renamed files
        
        ### CHECK FOR RENAMING AND GET NEW FILE NAME NOW
        if(isset($OPTPOD['rename'])) {
          $rssinfo['rename'] = filerename($rssinfo['enclosure_filename']);
          //print "\n ### ".$rssinfo['enclosure_filename'] . " - " . $rssinfo['rename']."\n";//???
          $itemlocal['file'] = $VAR['wwwbaseloc']."/".$v['folder']."/".$rssinfo['rename']; // the audio file will be saved here
          $itemlocal['fileini'] = $VAR['nonwwwbaseloc']."/".$v['folder']."/".$rssinfo['rename'].".ini"; // the options ini file will be saved here
        }
        
        #### CHECK IF FILE DOWNLOAD IS IN PROGRESS
        // read ini for enclosure file
        if(!file_exists($itemlocal['fileini'])) {
          $logwrite = logwrite("No status found for file '".$rssinfo['enclosure_filename']."'", 5);
        } else {
          $filestatus = parse_ini_file($itemlocal['fileini'],1);
          if($filestatus['status'] == "downloading") { // => download in progress
            $PROGRESS['downloadfile'] = "false"; // currently downloading, so don't download
            $logwrite = logwrite("Skipping Download. Progress status set to 'downloading' for file '".$rssinfo['enclosure_filename']."'", 4);
            // TODO: check if date is soooo old that we should assume the process failed
          }
        }
        
        #### CHECK IF FILE EXISTS AND IF SO IF WE SHOULD OVERWRITE   
        if($PROGRESS['downloadfile'] == "true") { // yes, we are still ready for downloading the item, so check some more
          if($OPTPOD['filesoverwrite'] != "true") { // we should NOT overwrite existing files
            // check if file exists
            // a. best way: check in download log
            // this checks the original enclosure URL and is safer in case of renaming files after downloading
            if(file_exists($podcastlocallogdownload)) { // download log exists
              if( exec('grep '.escapeshellarg($rssinfo['enclosure_url']."||").' '.$podcastlocallogdownload)) {
                $logwrite = logwrite("NOTE: Skipping Download. File found in download log '".$rssinfo['enclosure_url']."'", 3);
                $PROGRESS['downloadfile'] = "false"; // not allowed to overwrite
              } 
            } else { 
              // b. check if file exists, if download log does not exist 
              if(file_exists($itemlocal['file'])) {
                $logwrite = logwrite("NOTE: Skipping Download. File exists '".$itemlocal['file']."'", 3);
                $PROGRESS['downloadfile'] = "false"; // not allowed to overwrite
              }
            }
            $logwrite = logwrite("INFO: Options set to overwrite existing target file '".$itemlocal['file']."'", 4);
          } 
        }
        
        #### CHECK NOW IF WE ARE STILL MEANT TO DOWNLOAD THE FILE
        if($PROGRESS['downloadfile'] == "false") {
          $logwrite = logwrite("WARNING: Download #".$counter." skipped for reasons found in options or the like. File: '".$itemlocal['file']."'", 2);
        } else {      
          ##### SET FILE STATUS TO 'DOWNLOADING'
          // we do this by creating an ini config file with the name of the audio file
          $filestatus = array(
            "date" => date("r"), // store when we start downloading. Allowing for deletion of status file if e.g. older than 24 hours
            "status" => "downloading",
            "enclosure_url" => $rssinfo['enclosure_url']
          );
          // write this array to ini file inside podcast folder
          $array2ini = array2ini($itemlocal['fileini'], $filestatus);
          
          #### START DOWNLOADING FILE      
          // we could make this a background process (and might do so at a later stage)
          // but for now this is all linear, one after the other. Get the file first, modify it, then on to the next.
          $logwrite = logwrite("Start download #".$counter." - file '".$rssinfo['enclosure_url']."'");
          exec("wget -O ".$itemlocal['file']." ".$rssinfo['enclosure_url']."  >> /dev/null 2>&1");
          
          #### WRITE HEADER, CHANNEL AND ITEM XML AFTER SUCCESSFUL DOWNLOAD
          file_put_contents($itemlocal['filexmldir']."/".$rssinfo['enclosure_filename'].".xml", $rssxmlarray['items'][($counter - 1)]);
          file_put_contents($itemlocal['filexmldir']."/_CHANNEL.xml", $rssxmlarray['channel']);
          file_put_contents($itemlocal['filexmldir']."/_HEADER.xml", $rssxmlarray['header']);
          $logwrite = logwrite("INFO: Wrote XML of podcast for #".$counter." - file '".$rssinfo['enclosure_url']."' to '".$itemlocal['filexmldir']."/".$rssinfo['enclosure_filename'].".xml'", 4);

          #### LOG DOWNLOADED FILE
          // check if log file exists
          $PROGRESS['logdownload'] = "true"; // assume we should log the download
          if(file_exists($podcastlocallogdownload)) { // download log exists
            // now see if file has already been logged
            if( exec('grep '.escapeshellarg($rssinfo['enclosure_url']."||").' '.$podcastlocallogdownload)) {
              // found match
              $PROGRESS['logdownload'] = "false"; // log file exists AND we found the enclosure URL: don't log
            } 
          } 
          if($PROGRESS['logdownload'] == "true") {
            // appending original enclosure URL to download log file in podcast folder
            $logmessage = $rssinfo['enclosure_url']."||".date("r")."\n";
            // using the FILE_APPEND flag to append the content to the end of the file
            // and the LOCK_EX flag to prevent anyone else writing to the file at the same time
            file_put_contents($podcastlocallogdownload, $logmessage, FILE_APPEND | LOCK_EX);
            // add renaming of original file IF
            if(isset($rssinfo['rename'])) {
              $logmessage = $rssinfo['enclosure_url']."||RENAME||".$rssinfo['rename']."||".date("r")."\n";
              file_put_contents($podcastlocallogdownload, $logmessage, FILE_APPEND | LOCK_EX);
            }
          }
          
          ##### SET FILE TO 'IN PROGRESS - SET ID3V2'
          $filestatus = array(
            "date" => date("r"), // store when we start downloading. Allowing for deletion of status file if e.g. older than 24 hours
            "status" => "id3processing",
            "enclosure_url" => $rssinfo['enclosure_url']
          );
          // write this array to ini file inside podcast folder
          $array2ini = array2ini($itemlocal['fileini'], $filestatus);
          
          ##### CONVERT EXISTING FILE METADATA TO LATEST ID3V2 VERSION
          $exec = "id3v2 -C ".$itemlocal['file']; // convert all tags to ID3V2
          exec($exec);
          // delete all ID3 v1 tags
          $exec = "id3v2 -s ".$itemlocal['file']; 
          exec($exec);
          
          $id3tags = array(); // the values to assign to the existing mp3 file
          
          ##### READ EXISTING FILE METADATA
          $exec = "id3v2 -R ".$itemlocal['file'];
          // getting id3 tags in a string
          $lines = explode("\n",shell_exec($exec));
          foreach($lines as $line){
            if (preg_match('/(^[0-9a-zA-Z]{0,4}): (.*)/', $line, $matches)) {
              $value = trim($matches[2]);
              if($value != "") {
                $id3tags['file'][$matches[1]] = $matches[2];
             } else {
                // EMPTY MATCH ------------------------------
              } 
            } else {
              // NO MATCH -----------------------------
            }
          } 

          ##### COMBINE RSS ITEM INFO WITH FILE METADATA
          foreach($VAR['id3v2assign'] as $key => $values) {
            $xmlpairs = explode(";", trim($values)); // there can be more than one set in config.ini
            foreach($xmlpairs as $xmlpair) { // go through each one, the first found is the one to go with
              $xmlkeyvalue = explode("_-_", $xmlpair); // [0] = item or channel, [1] = key
              switch($xmlkeyvalue[0]) {
                case "file":
                  if(isset($id3tags[$xmlkeyvalue[0]][$xmlkeyvalue[1]])) {
                    $id3tags['new'][$key] = $id3tags[$xmlkeyvalue[0]][$xmlkeyvalue[1]];
                    // break out of foreach loop
                    break 2;
                  } else {
                  }
                break;
                case "channel":
                  if(isset($pod[$xmlkeyvalue[0]][$xmlkeyvalue[1]])) {
                    $id3tags['new'][$key] = $pod[$xmlkeyvalue[0]][$xmlkeyvalue[1]];
                    // break out of foreach loop
                    break 2;
                  } else {
                  }
                break;
                case "items":
                  if(isset($pod[$xmlkeyvalue[0]][($counter-1)][$xmlkeyvalue[1]])) {
                    $id3tags['new'][$key] = $pod[$xmlkeyvalue[0]][($counter-1)][$xmlkeyvalue[1]];
                    // break out of foreach loop
                    break 2;
                  } else {
                  }
                break;
              }
            }
          }
          
          ##### DELETE ALL ID3 TAGS THAT WE WANT TO OVERWRITE
          foreach($id3tags['new'] as $key => $value) {
            // removing has to be done in this loop, which is more CPU and time consuming, but that's how id3v2 works
            // to only remove what is really necessary, check with id3 frames found in file
            if(array_key_exists ( $key , $id3tags['file'] )) {
              $exec = "id3v2 -r \"".$key."\" ".$itemlocal['file'];
              exec($exec);
            }
          }
          
          ##### WRITE COMBINED ID3V2 TAGS TO FILE
          $exec = "id3v2 ";
          foreach($id3tags['new'] as $key => $value) {
            // clean multiple slashes from $value, if any
            // then escape double quotes with backslash
            $value = str_replace  ("\"", "\\\"", removeslashes($value));
            if($key == "COMM") { // wrap this string into CDATA
              $value = "<![CDATA[".$value."]]>";
            }
            $exec .= "--".$key." \"".$value."\" ";
          }
          $exec .= $itemlocal['file'];
          exec($exec);
          
          $logwrite = logwrite("INFO: successfully written ID3 tags to file '".$itemlocal['file']."'", 4); 
          $logwrite = logwrite("See ID3 tags with 'id3v2 -R ".$itemlocal['file'] ."'", 5); 
          
          #####  CHANGE FILE DATE TO 'PUBDATE'
          // reset file date for testing: uncomment next line. Will set file date to 1st Jan 1999 1am 01:01
          //$rssinfo['filedate_touch'] = "199901010101.01";
          $exec = "touch -t ".$rssinfo['filedate_touch']." ".$itemlocal['file'];
          exec($exec);
          $logwrite = logwrite("INFO: successfully changed date / touch for file #".$counter." - file '".$itemlocal['file']."'", 4);
          $logwrite = logwrite($exec, 5);
          
          ##### SET FILE STATUS TO 'SUCCESS'
          // this status is needed to show all 
          // we do this by creating an ini config file with the name of the audio file
          $filestatus = array(
            "date" => date("r"), // store when we start downloading. Allowing for deletion of status file if e.g. older than 24 hours
            "status" => "success",
            "enclosure_url" => $rssinfo['enclosure_url']
          );
          // write this array to ini file inside podcast folder
          $array2ini = array2ini($itemlocal['fileini'], $filestatus);                  
          
          ##### RENAME FILE IF REQUESTED
          // TODO later

        } // end "if" download file == true|false
      } // end "if" enclosure_url exists
    } // end foreach item
  } // end "if" podcast download == true|false
  
  ## DELETE TEMP COPY OF PODCAST
  if(file_exists($localpodxml)) {
    unlink($localpodxml);
    $logwrite = logwrite("INFO: Deleted local temp copy of podcast '".$localpodxml."'", 4);
  }
  $logwrite = logwrite("### FINISHED PODCAST '".$podcast."'", 5);
}

$logwrite = logwrite("DONE \n", 5);
?>
